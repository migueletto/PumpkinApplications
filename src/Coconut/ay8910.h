/*
AY-3-8910: two 8-bit I/O ports
AY-3-8912: one 8-bit I/O port
AY-3-8913: no I/O port

  R0:  channel A fine tune     (B0-B7)
  R1:  channel A coarse tune   (B0-B3)
  R2:  channel B fine tune     (B0-B7)
  R3:  channel B coarse tune   (B0-B3)
  R4:  channel C fine tune     (B0-B7)
  R5:  channel C coarse tune   (B0-B3)
  R6:  noise generator control (B0-B4)
  R7:  mixer control, I/O enable (B0-B7 active low)
         B0: channel A enable on mixer 1
         B1: channel B enable on mixer 2
         B2: channel C enable on mixer 3
         B3: noise enable on mixer 1
         B4: noise enable on mixer 2
         B5: noise enable on mixer 3
         B6: input enable on I/O port A
         B7: input enable on I/O port B
  R8: channel A amplitude
         B0-B3: fixed amplitude level
         B4: amplitude mode, 0=fixed, 1=envelope
  R9: channel B amplitude
         B0-B3: fixed amplitude level
         B4: amplitude mode, 0=fixed, 1=envelope
  R10: channel C amplitude
         B0-B3: fixed amplitude level
         B4: amplitude mode, 0=fixed, 1=envelope
  R11: envelope fine tune   (B0-B7)
  R12: envelope coarse tune (B0-B7)
  R13: envelope shape/cycle control
         B0: hold
         B1: alternate
         B2: attack
         B3: continue
  R14: I/O port A
  R15: I/O port B

The frequency of each square wave generated by the three Tone Generators
is obtained in the PSG by first counting down the input clock by 16, then by
further counting down the result by the programmed 12-bit Tone Period value

For example, if a frequency of 1KHz was required and the IC's clock frequency
was 1MHz, a total division rate of 1000 would be needed. The sound generator
itself divides by 16 so the course and fine pitch registers must provide a
further division by 62.5 (due to the fact that 1000/16 is 62.5). A division
rate of 62 or 63 will be accurate enough, since the registers can only store
whole numbers. Therefore, 62 or 63 would be written to register 0 and 0 would
be written to register 1.

The frequency of the noise source is obtained in the PSG by first counting
down the input clock by 16, then by further counting down the result by the
programmed 5-bit Noise Period value.

 R6      Noise-frequency         R6      Noise-frequency
  1            111860 Hz         17              6580 Hz
  2             55930 Hz         18              6214 Hz
  3             37286 Hz         19              5887 Hz
  4             27965 Hz         20              5593 Hz
  5             22372 Hz         21              5326 Hz
  6             18643 Hz         22              5084 Hz
  7             15980 Hz         23              4863 Hz
  8             13982 Hz         24              4660 Hz
  9             12428 Hz         25              4474 Hz
 10             11186 Hz         26              4302 Hz
 11             10169 Hz         27              4142 Hz
 12              9321 Hz         28              3995 Hz
 13              8604 Hz         29              3857 Hz
 14              7990 Hz         30              3728 Hz
 15              7457 Hz         31              3608 Hz
 16              6991 Hz

The frequency of the envelope is obtained in the PSG by first counting down
the input clock by 256, then by further counting down the result of the
programmed 16-bit Envelope Period value.

The Envelope Generator further counts down the envelope frequency by 16,
producing a 16-state per cycle envelope pattern as defined by its 4-bit
counter output, E3 E2 E1 E0. The particular shape and cycle pattern of any
desired envelope is accomplished by controlling the count pattern (count
up/count down) of the 4-bit counter and by defining a single cycle or
repeat-cycle pattern. 

The specific amplitude control of each of the three D/A Converters is
acomplished by the three sets of 4-bit outputs of the Amplitude Control block,
while the Mixer outputs provide the base signal frequency (Noise and/or Tone). 

 0      \__________     single decay then off

 4      /|_________     single attack then off

 8      \|\|\|\|\|\     repeated decay

 9      \__________     single decay then off

10      \/\/\/\/\/\     repeated decay-attack
	  _________
11      \|              single decay then hold

12      /|/|/|/|/|/     repeated attack
	 __________
13      /               single attack then hold

14      /\/\/\/\/\/     repeated attack-decay

15      /|_________     single attack then off

*/

#define AY_3_8910	0
#define AY_3_8912	2
#define AY_3_8913	3

typedef struct {
  Hardware *hardware;
  UInt32 type;
  UInt32 clock;
  UInt32 toneA, toneB, toneC, noise;
  UInt32 mixer_toneA, mixer_toneB, mixer_toneC;
  UInt32 mixer_noiseA, mixer_noiseB, mixer_noiseC;
  UInt32 ampA, ampB, ampC;
  UInt32 portA_input, portB_input;
  UInt32 envelope;
  UInt32 index;
  UInt8 r[16];
} AY8910;

void ay8910_init(AY8910 *ay8910, Hardware *hardware, UInt32 type, UInt32 clock) SECTION("aux");

void ay8910_setindex(AY8910 *ay8910, UInt32 index);
void ay8910_setvalue(AY8910 *ay8910, UInt32 value);
UInt32 ay8910_getindex(AY8910 *ay8910);
UInt32 ay8910_getvalue(AY8910 *ay8910);
